%{
    /* Definições */
%}

WHITESPACE [ \n\t]*

ID {WHITESPACE}[a-z]([A-Z][a-z0-9]*)*


/* Valores de dados */
INT [0-9]*
STRING \"[a-zA-Z0-9]*\"

/* Operações de igualdade */
IGUAL_MENOR {DESIG_EXPR}{WHITESPACE}<={WHITESPACE}{ADD_EXPR}
IGUAL_MAIOR {DESIG_EXPR}{WHITESPACE}>={WHITESPACE}{ADD_EXPR}
MAIOR {DESIG_EXPR}{WHITESPACE}>{WHITESPACE}{ADD_EXPR}
MENOR {DESIG_EXPR}{WHITESPACE}<{WHITESPACE}{ADD_EXPR}

/* Operações algébricas */
DIVIDE {MUL_EXPR}{WHITESPACE}/{WHITESPACE}{UN_EXPR}
MULTIPLICA {MUL_EXPR}{WHITESPACE}*{WHITESPACE}{UN_EXPR}
MENOS {ADD_EXPR}{WHITESPACE}-{WHITESPACE}{MUL_EXPR}
MAIS {ADD_EXPR}{WHITESPACE}+{WHITESPACE}{MUL_EXPR}

LIST_EXPR {EXPR}|{LIST_EXPR}{WHITESPACE},{WHITESPACE}{EXPR}
PRIM_EXPR {ID}\(LIST_EXPR\)|{ID}()|{ID}|{STRING}|{INT}|({EXPR})
L_VALUE_EXPR {ID}
UN_EXPR -{PRIM_EXPR}|!{PRIM_EXPR}|{PRIM_EXPR}
MUL_EXPR {MULTIPLICA}|{DIVIDE}|{UN_EXPR}
ADD_EXPR {MAIS}|{MENOS}|{MUL_EXPR}
DESIG_EXPR {MENOR}|{MAIOR}|{IGUAL_MAIOR}|{IGUAL_MENOR}|{ADD_EXPR}
EQ_EXPR {EQ_EXPR}{WHITESPACE}=={WHITESPACE}{DESIG_EXPR}|{EQ_EXPR}{WHITESPACE}!={WHITESPACE}{DESIG_EXPR}|{DESIG_EXPR}
AND_EXPR {AND_EXPR}{WHITESPACE}e{WHITESPACE}{EQ_EXPR}|{EQ_EXPR}
OR_EXPR {OR_EXPR}{WHITESPACE}ou{WHITESPACE}{AND_EXPR}|{AND_EXPR}
EXPR {OR_EXPR}|{L_VALUE_EXPR}{WHITESPACE}={WHITESPACE}{ASSIGN_EXPR}
REPETICAO "enquanto""("{EXPR}")""execute"{COMD}
CONDICIONAL "se""("{EXPR}")""entao"{COMD}|"se""("{EXPR}")""entao"{COMD}"senao"{COMD}
ESCREVA "escreva" {EXPR}";"|"escreva" {STRING}";"
LEIA "leia" {L_VALUE_EXPR}";"
RETORNE "retorne"{EXPR}";"
COMD ;|{EXPR};|{RETORNE}|{LEIA}|{ESCREVA}|novalinha;|{CONDICIONAL}|{REPETICAO}|{BLOCO}
LISTA_COMD {COMD}|{COMD} {LISTA_COMD} 
TIPO "int"|"car"
LISTA_DECL_VAR {TIPO} {ID} {DECL_VAR}";" {LISTA_DECL_VAR}| 
BLOCO "{"{LISTA_DECL_VAR} {LIST_COMD}"}" | "{"{LISTA_DECL_VAR}"}"
LISTA_PARAM_CONT {TIPO} {ID} | {TIPO} {ID}"," {LISTA_PARAM_CONT}
LISTA_PARAM {LISTA_PARAM_CONT} |
DECL_FUNC \({LISTA_PARAM}\){WHITESPACE}{BLOCO}
DECL_VAR ,{WHITESPACE}{ID}{WHITESPACE}{DECL_VAR}|{WHITESPACE}
DECL_PROG "programa"{WHITESPACE}{BLOCO}
DECL_FUNC_VAR {TIPO}{WHITESPACE}{ID}{WHITESPACE}{DECL_VAR};{WHITESPACE}{DECL_FUNC_VAR}|{TIPO}{WHITESPACE}{ID}{WHITESPACE}{DECL_FUNC}{WHITESPACE}{DECL_FUNC_VAR}|{WHITESPACE} 
PROGRAMA {DECL_FUNC_VAR}|{DECL_PROG}


%%
    /* Regras */

[0-9]* { printf("Interger\n"); }
[0-9]*.[0-9]* { printf("Floating\n"); }
"[a-zA-Z0-9_ ]*" { printf("String\n"); }
.* { printf("Invalid\n"); }
exit { return 0; }

%%

int yywrap() {
    printf("Oque isso faz?");

    return 0;
}

int main(int argc, int **argv) {
    printf("Enter string: ");
    
    ++argv, --argc;

    if ( argc > 0 ) 
        yyin = fopen( argv[0], "r" );
    else 
        yyin = stdin;
    

    yylex();

    return 0;
}